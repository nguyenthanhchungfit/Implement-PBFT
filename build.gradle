/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.2/samples
 */
apply plugin: 'java'
apply plugin: 'application'

ext {
    distOutputDir = "dist"
    zserverJavaDir = '/zserver/java/lib'
    mainApp = System.getProperty("mainClass", "com.chungnt.pbft.MainApp"); // default MainApp
    distJar = System.getProperty("distJar", "implement-pbft.jar"); // default jar file
    ZaApplicationDefaultJvmArgs = [
            '-ea',
            '-Dzappname=zacomment-like-realtime-timeline',
            '-Dzappprof=development',
            '-Dzconfdir=conf',
            '-Dzconffiles=config.ini,profile_config.ini,zfriend_config.ini',
    ]
}

def grpcVersion = '1.56.1' // CURRENT_GRPC_VERSION
def protobufVersion = '3.23.4'
def protocVersion = protobufVersion

repositories {
    flatDir {
        dirs 'lib'
    }
    mavenCentral()
}

sourceSets {
    config {
        java {
            srcDir 'conf'

        }
    }
    main {
        java {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}

dependencies {

    implementation(
            "io.grpc:grpc-protobuf:${grpcVersion}",
            "io.grpc:grpc-services:${grpcVersion}",
            "io.grpc:grpc-stub:${grpcVersion}"
    )

    // https://mvnrepository.com/artifact/org.jsoup/jsoup
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.14.1'
    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl
    implementation group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    // https://mvnrepository.com/artifact/ro.nextreports/jofc2
    implementation group: 'ro.nextreports', name: 'jofc2', version: '1.0.1'
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation 'commons-codec:commons-codec:1.11'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.0'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.0'


    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    compileOnly 'org.projectlombok:lombok:1.18.20'

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation 'junit:junit:4.13'
}


//For clean task
clean {
    println ">> Clean old dist, old build"
    delete distOutputDir
    delete buildDir
}

// Override properties java runservice
tasks.withType(JavaExec) {
    jvmArgs = ZaApplicationDefaultJvmArgs
}

// Setup jar info, copy dependencies, copy jar build
mainClassName = mainApp


compileJava {
    //custom java source dir
    if (gradle.startParameter.getTaskNames().contains('runSingle')) {
        doFirst {
            sourceSets.main.java.srcDirs += 'test' //add source for run main method in single file test
        }
    } else {
        doFirst {
            sourceSets.main.java.srcDirs = ['src'] //source dir for jar task
        }
    }
}

jar {
    archiveFileName.set(distJar)
    doFirst {
        copy {
            println "MainClass of $distJar: $mainApp"
            println "Copy dependencies to $distOutputDir/lib"
            from configurations.compileClasspath into "$distOutputDir/lib"

            //            println "*********INFO ***********"
            //            configurations.compileClasspath.each{
            //                println it
            //            }
        }
    }
    manifest {
        attributes(
                'Manifest-Version': '1.0',
                'Built-By': System.properties['user.name'],
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                'Class-Path': configurations.compileClasspath.collect { "lib/$it.name" }.join(' '),
                'Main-Class': mainApp,
                'Description': 'This is an application JAR'
        )
    }
    doLast {
        copy {
            println "Copy $distJar from $buildDir/libs to $distOutputDir"
            from "$buildDir/libs" into "$distOutputDir"
        }
    }
}

// set env test
test {
    jvmArgs = ZaApplicationDefaultJvmArgs
    useJUnit()
    testLogging {
        showStandardStreams = true
    }
    maxHeapSize = '1G'
}